import { declare } from '@babel/helper-plugin-utils'
import transform, { api } from '@lightscript/transform'

import p_throwExpressions from '@babel/plugin-proposal-throw-expressions'
import p_decorators from '@babel/plugin-proposal-decorators'
import p_classProperties from '@babel/plugin-proposal-class-properties'
import p_flowStripTypes from '@babel/plugin-transform-flow-strip-types'
import p_env from '@babel/preset-env'

// Expose LightScript API
export { transform, api }

pluginTable = {
  '@babel/plugin-proposal-throw-expressions': p_throwExpressions
  '@babel/plugin-proposal-decorators': p_decorators
  '@babel/plugin-proposal-class-properties': p_classProperties
  '@babel/plugin-transform-flow-strip-types': p_flowStripTypes
  '@lightscript/transform': transform
}

resolvePlugin(plugin) ->
  if Array.isArray(plugin):
    [pluginTable[plugin[0]], plugin[1]]
  else:
    pluginTable[plugin]

isExcludedPlugin(plugin, exclusions) ->
  if Array.isArray(plugin):
    exclusions.indexOf(plugin[0]) > -1
  else:
    exclusions.indexOf(plugin) > -1

export default declare! (api, opts) ->
  // Require Babel 7
  api.assertVersion(7)

  now opts = opts or {}
  decoratorOpts = opts.decoratorOpts or { legacy: true }

  // Compute baseline plugins
  basePlugins = [
    '@babel/plugin-transform-flow-strip-types'
    '@babel/plugin-proposal-throw-expressions'
    ['@babel/plugin-proposal-decorators', decoratorOpts]
    ['@babel/plugin-proposal-class-properties', { loose: true }]
  ]

  // Allow user to exclude/add plugins
  excludedPlugins = opts.disablePlugins or []
  let actualPlugins = basePlugins
    .filter(x -> not isExcludedPlugin(x, excludedPlugins))
    .map(x -> resolvePlugin(x))
    .concat(opts.additionalPlugins or [])

  // Apply LightScript plugin
  lscOpts = Object.assign({}, opts)
  delete lscOpts.env
  delete lscOpts.disablePlugins
  delete lscOpts.additionalPlugins
  if not opts._noLscTransform:
    actualPlugins.unshift([transform, lscOpts])

  // Apply Env preset and finish
  {
    plugins: actualPlugins
    presets: [
      if opts.env != false: [
        p_env
        if typeof(opts.env) == 'object': opts.env else: {}
      ]
    ].filter(Boolean)
  }
